N = {<program>,<decl_list>,<declaration>,<compound_stmt>,<primitive_type>,<array_decl>,<type>,<stmt_list>,<stmt>,<simple_stmt>,<assign_stmt>,<expression>,<term>,<factor>,<io_stmt>,<struct_stmt>,<if_stmt>,<while_stmt>,<condition>,<relation>,<constant>,<io_stmt>}
E = {;,bool,char,integer,string,float,array,[,],(,),{,},=,identifier,nr,constant,+,-,*,/,print,read,if,otherwise,while,integer,float,string,<,<=,=,!=,>=,>}
S = <program>
P :
<program> -> <decl_list> <compound_stmt>
<decl_list> -> <declaration> | <declaration> ; <decl_list>
<declaration>  -> <type> identifier ;
<primitive_type>  ->  bool | char | integer | string | float
<array_decl>  ->  array <primitive_type> [ nr ]
<type> -> <primitive_type> | <array_decl>
<compound_stmt> -> <stmt_list>
<stmt_list> -> <stmt> | <stmt> <stmt_list>
<stmt> -> <simple_stmt> | <struct_stmt>
<simple_stmt> -> <assign_stmt> | <io_stmt>
<assign_stmt> -> identifier = <expression>
<expression> -> <expression> + <term> | <expression> - <term> | <term>
<term> -> <term> * <factor> | <term> / <factor> | <factor>
<factor> -> ( <expression> ) | identifier | constant
<io_stmt> -> print ( identifier ) | print ( constant ) | read ( identifier )
<struct_stmt> -> <compound_stmt> | <if_stmt> | <while_stmt>
<if_stmt> -> if ( <condition> ) { <stmt_list> } | if ( <condition> ) { <stmt_list> } otherwise { <stmt_list> }
<while_stmt> -> while ( <condition> ) { <stmt_list> }
<condition> -> <expression> <relation> <expression>
<relation> -> < | <= | = | != | >= | >
<constant> -> integer | float | char | string